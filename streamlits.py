import os
import tempfile
from pathlib import Path
from docx import Document
from docxcompose.composer import Composer
import streamlit as st

# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–≤ –æ–±–ª–∞–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
BASE_DIR = Path(__file__).parent / "Angle grinder"

def collect_instruction(tool_type: str):
    if tool_type == "corded":
        tool_dir = BASE_DIR / "Corded tools"
        order = [
            "1 Cover",
            "2 General safety",
            "3 Icon",
            "4 Additional safety and Intended use",
            "5 Specifications",
            "6 Operation picture",
            "7 Operation",
            "8 Maintenance",
            "9 End cover"
        ]
    else:
        tool_dir = BASE_DIR / "Cordless tools"
        order = [
            "1 Cover",
            "2a General safety",
            "2b Battery safety",
            "3 Icon",
            "4 Additional safety and Intended use",
            "5 Specifications",
            "6 Operation picture",
            "7 Operation",
            "8 Maintenance",
            "9 End cover"
        ]

    doc_paths = []
    for folder in order:
        folder_path = tool_dir / folder
        files = list(folder_path.glob("*.docx"))
        if len(files) != 1:
            raise FileNotFoundError(f"–û–∂–∏–¥–∞–ª—Å—è 1 .docx –≤ {folder_path}, –Ω–∞–π–¥–µ–Ω–æ: {len(files)}")
        doc_paths.append(files[0])

    master = Document(doc_paths[0])
    composer = Composer(master)
    for path in doc_paths[1:]:
        composer.append(Document(path))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
        composer.save(tmp.name)
        return tmp.name

# === –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.set_page_config(page_title="–°–±–æ—Ä—â–∏–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –£–®–ú", layout="centered")
st.title("üõ†Ô∏è –°–±–æ—Ä—â–∏–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –£–®–ú")
st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ —Å–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")

tool_type = st.radio(
    "–¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:",
    options=["cordless", "corded"],
    format_func=lambda x: "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ã–π" if x == "cordless" else "–°–µ—Ç–µ–≤–æ–π"
)

if st.button("–°–æ–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"):
    try:
        output_path = collect_instruction(tool_type)
        with open(output_path, "rb") as f:
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
                data=f,
                file_name=f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_{'–∞–∫–∫—É–º' if tool_type == 'cordless' else '—Å–µ—Ç–µ–≤–∞—è'}.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
        os.unlink(output_path)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")